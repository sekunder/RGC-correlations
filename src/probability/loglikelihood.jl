
"""
    loglikelihood(X, P)

Computes the log likelihood of `X` given distribution `P`
"""
function loglikelihood(X::Union{Matrix{Bool},BitMatrix}, P::AbstractBinaryVectorDistribution; kwargs...)
    sum_kbn([log(pdf(P,X[:,k])) for k = 1:size(X,2)]) / size(X,2)
end

"""
    loglikelihood(X, J, grad)

Computes the loglikelihood of the data given the Ising distribution generated by
`J`. If `grad` is a vector of length > 0, it is modified in-place with the
gradient of the function.

"""
function loglikelihood(X::Union{Matrix{Bool}, BitMatrix}, J, grad)
    # TODO compute this thing efficiently (i.e. see if it can be done without
    # instantiating an IsingDistribution object)
end

"""
    MPF_objective(X, J, grad)

Uses function `K` from the MPF paper (or maybe from the MPF sample code for
Matlab).

"""
function MPF_object(X::Union{Matrix{Bool}, BitMatrix}, J, grad)
    # TODO implement this
end
